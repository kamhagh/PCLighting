{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"d",
				"double"
			],
			[
				"st",
				"std::cout"
			],
			[
				"c",
				"cout"
			],
			[
				"test",
				"testY"
			],
			[
				"std",
				"std::endl"
			],
			[
				"arg",
				"argv"
			],
			[
				"te",
				"testX"
			],
			[
				"C",
				"Color"
			],
			[
				"set",
				"setPixel"
			],
			[
				"ma",
				"main	main()"
			],
			[
				"cla",
				"class	class-..-(class)"
			],
			[
				"Co",
				"Color	(PCLight.py)"
			],
			[
				"s",
				"split	(PCLight.py)"
			],
			[
				"de",
				"defs	Method"
			],
			[
				"get",
				"getB"
			],
			[
				"g",
				"getA"
			],
			[
				"Serial",
				"SerialNumber"
			],
			[
				"LED",
				"LEDCount"
			],
			[
				"b",
				"Blue"
			],
			[
				"t",
				"toset"
			],
			[
				"clea",
				"clearAll"
			],
			[
				"pi",
				"pixel"
			],
			[
				"l",
				"little"
			],
			[
				"last",
				"lastPixels"
			],
			[
				"pixel",
				"Pixel"
			],
			[
				"i",
				"i"
			],
			[
				"ADC",
				"adcval"
			],
			[
				"in",
				"inc	#include \"â€¦\""
			],
			[
				"TCC",
				"TCCR1A"
			],
			[
				"delay",
				"_delay_ms"
			],
			[
				"v",
				"vertices"
			],
			[
				"p",
				"push_back"
			],
			[
				"ot",
				"out_normals"
			],
			[
				"Strin",
				"StringToVec"
			],
			[
				"out_",
				"out_vertices"
			],
			[
				"glBind",
				"glBindBuffer"
			],
			[
				"VAO",
				"lightVAO"
			],
			[
				"glge",
				"glGenVertexArrays"
			],
			[
				"proj",
				"projLoc"
			],
			[
				"sha",
				"shader_bulb"
			],
			[
				"shader_",
				"shader_container"
			],
			[
				"GLFW",
				"GLFW_KEY_S"
			],
			[
				"GLFW_KE",
				"GLFW_KEY_W"
			],
			[
				"def",
				"define"
			],
			[
				"n",
				"nullptr"
			],
			[
				"SOIL",
				"SOIL_LOAD_RGB"
			],
			[
				"SOI",
				"SOIL_load_image"
			],
			[
				"of",
				"offsetY"
			],
			[
				"offset",
				"offsetYUniform"
			],
			[
				"GL",
				"GL_FRAGMENT_SHADER"
			],
			[
				"Vertex",
				"GL_VERTEX_SHADER"
			],
			[
				"freat",
				"fragmentCode"
			],
			[
				"frag",
				"fragmentShader"
			],
			[
				"vertex",
				"vertexCode"
			],
			[
				"framge",
				"fragmentShader1"
			],
			[
				"shaderProgra",
				"shaderProgram1"
			],
			[
				"shaderp",
				"shaderProgram1"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#include <iostream>\n#include <cstdlib>\n#include <math.h>\n#include <time.h>\n\ndouble Random()\n{\n	return ((double) rand() / (RAND_MAX));\n}\n\nint main(int argc, char const *argv[])\n{\n	int hits = 0, misses = 0;\n\n	srand(time(NULL));\n\n	if (argc < 2)\n	{\n		std::cout << \"Usage: \" << argv[0] << \" <Number of test>\" << std::endl;\n		return -1;\n	}\n\n	double testX, testY;\n	for (int i = 0; i != atoi(argv[1]); ++i)\n	{\n		testX = Random();\n		testY = Random();\n\n\n		double result;\n\n		result = pow(testX, 2) + pow(testY, 2);\n\n		if (result < 1)\n		{\n			hits++;\n		} else {\n			misses++;\n		}\n	}\n	if (misses == 0)\n	{\n		std::cout << \"misses = 0, quitting...\\n\" << std::endl;\n		return 0;\n	}\n	double pi = (double)hits/(hits+misses);\n	std::cout << \"hits: \" << hits << \" misses: \" << misses << std::endl;\n	std::cout << \"Number of hits/misses(PI): \" << 4 * pi << std::endl;\n\n	return 0;\n}",
			"file": "/home/k/Desktop/montecarlo/main.cpp",
			"file_size": 1013,
			"file_write_time": 130970833212014343,
			"settings":
			{
				"buffer_size": 854,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/C++/C++ Single File.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				"Syntax Check"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 133.0,
		"last_filter": "qu",
		"selected_items":
		[
			[
				"qu",
				"Git: Quick Commit"
			],
			[
				"git q",
				"Git: Quick Commit"
			],
			[
				"git add",
				"Git: Add All"
			],
			[
				"git com",
				"Git: Commit"
			],
			[
				"run ",
				"Build With: C++ Single File - Run"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"git:",
				"Git: Init"
			],
			[
				"git in",
				"Git: Init"
			],
			[
				"pull",
				"Git: Pull"
			],
			[
				"pus",
				"Git: Push"
			],
			[
				"git p",
				"Git: Push"
			],
			[
				"com",
				"Git: Commit"
			],
			[
				"ad",
				"Git: Add All"
			],
			[
				"push",
				"Git: Push"
			],
			[
				"q",
				"Git: Quick Commit"
			],
			[
				"add",
				"Git: Add All"
			],
			[
				"git c",
				"Git: Commit"
			],
			[
				"git pu",
				"Git: Push Current Branch"
			],
			[
				"gitpu",
				"Git: Push"
			],
			[
				"git comm",
				"Git: Commit"
			],
			[
				"git ad",
				"Git: Add All"
			],
			[
				"gitc",
				"Git: Commit"
			],
			[
				"comm",
				"Git: Commit"
			],
			[
				"git push",
				"Git: Push Current Branch"
			],
			[
				"branch",
				"Git: Push Current Branch"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"c",
				"Set Syntax: C++"
			],
			[
				"c++",
				"Set Syntax: C++"
			],
			[
				"docb",
				"DocBlockr: Decorate line comment"
			],
			[
				"dob",
				"DocBlockr: Decorate line comment"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"pyt",
				"Set Syntax: Python"
			],
			[
				"change",
				"Git: Change Branch"
			],
			[
				"git pus",
				"Git: Push"
			],
			[
				"compare",
				"GitGutter: Compare Against Branch"
			],
			[
				"gitgutter",
				"GitGutter: Compare Against Branch"
			],
			[
				"gitgu",
				"GitGutter: Compare Against Branch"
			],
			[
				"git co",
				"Git: Commit"
			],
			[
				"git pul",
				"Git: Pull"
			],
			[
				"change ",
				"Git: Change Branch"
			],
			[
				"fold",
				"Project: Add Folder"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 561.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/k/Desktop/montecarlo"
	],
	"file_history":
	[
		"/home/k/Desktop/PCLighting/Windows/Lighting.py",
		"/home/k/Desktop/PCLighting/Windows/PCLight.py",
		"/home/k/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/k/Desktop/PCLighting/Linux/Lighting.py",
		"/home/k/Desktop/PCLighting/README.md",
		"/home/k/Desktop/montecarlo/main.cpp",
		"/home/k/Desktop/PCLighting/Linux/PCLight.py",
		"/home/k/Desktop/PCLighting/Linux/Effects.py",
		"/home/k/Desktop/PCLighting/Windows/Effects.py",
		"/home/k/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/k/Desktop/Lighting.pyc",
		"/home/k/Desktop/PCLight.py",
		"/media/k/Linux/Projects/AVR/ATMega32/Blinky/flash.elf",
		"/media/k/Linux/Projects/AVR/ATMega32/Blinky/compile.sh",
		"/media/k/Linux/Projects/AVR/ATMega32/Blinky/compile.sh~",
		"/media/k/10F019F8F019E4AE/LightPC/PCLighting/Linux/Effects.py",
		"/media/k/10F019F8F019E4AE/LightPC/PCLighting/Linux/Lighting.py",
		"/media/k/10F019F8F019E4AE/LightPC/PCLighting/Linux/PCLight.py",
		"/home/k/Desktop/Lighting.py",
		"/media/k/Linux/Projects/C++/WaveFront/main.cpp",
		"/media/k/Linux/Projects/C++/Threading/main.cpp",
		"/home/k/Desktop/A.cpp",
		"/media/k/10F019F8F019E4AE/PC_lighting/Adafruit_NeoPixel.cpp",
		"/home/k/Desktop/test.py",
		"/media/k/10F019F8F019E4AE/PC_lighting/Adafruit_NeoPixel.h",
		"/media/k/10F019F8F019E4AE/PC_lighting/PC.h",
		"/media/k/10F019F8F019E4AE/PC_lighting/PC.cpp",
		"/home/k/Desktop/OpenGL-Test/mandelbrot.cpp",
		"/media/k/Linux/Projects/AVR/ATTiny13/Blinky/main.c",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/blah.cpp",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/Shader.h",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/Lighting/main.cpp",
		"/media/k/Linux/Projects/C++/OpenCV/test.cpp",
		"/home/k/Desktop/OpenGL-master/mandelbrot.cpp",
		"/media/k/Linux/Projects/AVR/ATTiny13/Blinky/ADC.h",
		"/media/k/Linux/Projects/AVR/ATMega32/PWM/PWM.h",
		"/media/k/Linux/Projects/AVR/ATMega32/PWM/main.c",
		"/media/k/Linux/Projects/AVR/ATMega32/Blinky/main.c",
		"/home/k/Desktop/email.py",
		"/home/k/Wave/test.obj",
		"/media/k/Linux/Projects/C++/WaveFront/Sphere32.obj",
		"/media/k/Linux/Projects/C++/WaveFront/Wave.h",
		"/home/k/Downloads/Sphere32.obj",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/Lighting/Shader.h",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/Lighting/shaders/bulb.frag",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/Lighting/shaders/bulb.vs",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/Lighting/shaders/container.vs",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/Lighting/shaders/container.frag",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/shaders/coord.vs",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/shaders/coord.frag",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/Camera.h",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/Camreaclass.cpp",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/camera.h",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/camera.cpp",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/main.cpp",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/shaders/default.frag",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/shaders/default.vs",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/main.c",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/Shader.cpp",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/shaders/default.shader",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/shader/default.vs",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/shader/default.frag",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/Shaders/shader.frag",
		"/media/k/Linux/Projects/OpenGL/Letsdoit/Shaders/shader.vs",
		"/media/k/Linux/Projects/Python/multi proc/proc.py"
	],
	"find":
	{
		"height": 55.0
	},
	"find_in_files":
	{
		"height": 157.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"hit",
			"miss",
			"fade",
			"millis",
			"100",
			"rainbowTimer",
			"255",
			";\n",
			");\n",
			"LEDCount",
			"Buffer",
			"ser.write('255')",
			"ser.write(255)",
			"set",
			"StringToVec",
			"Program",
			"program",
			"PROGRAM",
			"Program",
			";\n",
			"path/to/shaders/lamp.",
			"path/to/shaders/lighting.",
			"path/to/shaders/lamp",
			"path/to/shaders/lighting",
			"path/to/shaders/lamp",
			"path/to/shaders/lighting",
			"ourShader",
			"path/to/shaders/shader",
			"path/to/",
			"EBO",
			"indic",
			"path/to/",
			"position",
			"shadershader",
			"Program",
			"std::",
			"null",
			"nullptr"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"self.LEDCount",
			"self.Buffer",
			"slf.Buffer",
			"elf.Buffer",
			"self.Buffer",
			"ser.write(b'255')",
			"ser.write('255')",
			"ser",
			"StringParse",
			"shaders/bulb",
			"shaders/container",
			"shaders/bulb",
			"shaders/container",
			"shaders/bulb",
			"shaders/container",
			"shaders/bulb",
			"shader_container",
			"shaders/coord",
			"",
			"shader",
			"shaderProgram",
			"",
			"NULL"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/k/Desktop/montecarlo/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 854,
						"regions":
						{
						},
						"selection":
						[
							[
								646,
								646
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 180.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 54.0
	},
	"input":
	{
		"height": 53.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 114.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 166.0
	},
	"pinned_build_system": "",
	"project": "montecarlo.sublime-project",
	"replace":
	{
		"height": 106.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"sha",
				"/media/k/Linux/Projects/OpenGL/Letsdoit/Lighting/Shader.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 133.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 360.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 155.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
